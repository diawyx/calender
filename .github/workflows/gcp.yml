name: CI Pipeline - Build, Scan, Push.

on:
  push:
    branches:
      - main # Atau branch develop, feature/*, dll.
  pull_request:
    branches:
      - main

env:
  # Variabel untuk SonarQube (WAJIB diisi di GitHub Secrets)
  # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Variabel untuk GCP Artifact Registry (isi jika mau push ke GAR)
  # GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  # GCP_ARTIFACT_REGISTRY_REPOSITORY: 'your-artifact-registry-repo' # ganti nama repo GAR kamu
  # GCP_REGION: 'your-gcp-region' # misalnya: asia-southeast1

  # Variabel untuk nama image dan registry (GANTI DENGAN DETAIL REGISTRY KAMU)
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }} # atau path ke registry lain seperti ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: ${{ github.event.repository.name }} # Menggunakan nama repository GitHub sebagai nama image

jobs:
  build-scan-and-push:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest
    # permissions: # Diperlukan jika menggunakan Workload Identity Federation untuk otentikasi ke GCP
    #   contents: read
    #   id-token: write

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Diperlukan SonarQube untuk analisis akurat pada 'new code'

      - name: ‚òï Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17' # Sesuaikan versi Java yang dibutuhkan SonarQube Scanner

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Tahap 1: Build Docker Image (Verifikasi Awal) ---
      - name: üõ†Ô∏è Build Docker image (local verification)
        id: docker_build_verify # Memberi id agar bisa dirujuk jika perlu
        uses: docker/build-push-action@v5
        with:
          context: .
          # Tidak di-push, hanya build untuk verifikasi
          push: false
          load: true # Memuat image ke local Docker daemon (opsional)
          tags: ${{ env.IMAGE_NAME }}:build-verify-${{ github.sha }}

      # --- Tahap 2: Analisis Kualitas Kode Statis ---
      # Langkah ini berjalan jika 'docker_build_verify' sukses.
      # Jika SonarQube Quality Gate gagal, job akan berhenti di sini.
      - name: SonarQube ‚úÖ Static Code Analysis
        uses: sonarsource/sonarqube-scan-action@master # Pertimbangkan untuk pin ke versi spesifik, misal @v2.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        # Tambahkan 'with: args: ...' jika ada parameter SonarQube Scanner tambahan

      # --- Tahap 3: Push Docker Image ke Registry ---
      # Langkah ini hanya berjalan jika semua langkah sebelumnya (termasuk SonarQube scan) berhasil.

      # (OPSIONAL) Jika menggunakan Google Artifact Registry, uncomment bagian otentikasi di bawah
      # - name: üîë Authenticate to Google Cloud (if using GAR)
      #   if: success() # Hanya jika SonarQube scan sukses
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #     workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_ID_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WIF_POOL_ID }}/providers/${{ secrets.GCP_WIF_PROVIDER_ID }}'
      #     service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}' # Pastikan Service Account punya role Artifact Registry Writer

      # - name: üê≥ Configure Docker for Artifact Registry (if using GAR)
      #   if: success() # Hanya jika SonarQube scan sukses
      #   run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      # (OPSIONAL) Jika menggunakan Docker Hub atau registry lain yang butuh login
      # - name: üê≥ Log in to Docker Hub (atau registry lain)
      #   if: success() # Hanya jika SonarQube scan sukses
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      #     # Untuk GitHub Container Registry (ghcr.io):
      #     # registry: ghcr.io
      #     # username: ${{ github.actor }}
      #     # password: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚¨ÜÔ∏è Build and Push Docker image to Registry
        if: success() # Memastikan semua langkah sebelumnya sukses
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            # Contoh jika pakai GCP Artifact Registry (setelah otentikasi):
            # ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            # ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

  # --- JOB DEPLOYMENT (MASIH DIKOMENTARI) ---
  # deploy-testing:
  #   name: Deploy to GCP Testing Environment
  #   needs: build-scan-and-push # Tergantung job build-scan-and-push sukses
  #   if: github.ref == 'refs/heads/main' # Contoh: hanya deploy dari branch main
  #   runs-on: ubuntu-latest
  #   # ... (langkah-langkah deployment ke testing) ...

  # approve-production:
  #   # ... (langkah approval) ...

  # deploy-production:
  #   # ... (langkah-langkah deployment ke production) ...
